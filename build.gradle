plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = '1.0.0'
group = 'com.riburitu.regionvisualizer'
archivesBaseName = 'regionvisualizer'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

minecraft {
    mappings channel: 'official', version: '1.20.1'

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                regionvisualizer {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'regionvisualizer'
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'regionvisualizer'
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'regionvisualizer'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', 'regionvisualizer', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    flatDir {
        dirs 'librerias'  // Cambiar a 'libs' en lugar de 'librerias'
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.4.3'
    
    // Usar JARs locales - crear carpeta 'libs' en la ra√≠z del proyecto
    implementation fileTree(dir: 'librerias', include: ['*.jar'])
    
    // Si quieres mantener las dependencias maven como backup:
    // implementation 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'
    // implementation 'com.googlecode.soundlibs:jorbis:0.0.17.4'
    // implementation 'com.googlecode.soundlibs:tritonus-share:0.3.7.4'
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
        mod_id           : 'regionvisualizer',
        mod_name         : 'RegionVisualizer',
        mod_license      : 'MIT',
        mod_version      : project.version,
        mod_authors      : 'Riburitu',
        mod_description  : 'Regions visualizables.',
        minecraft_version: '1.20.1',
        forge_version    : '47.1.3'
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : 'RegionVisualizer',
            'Specification-Vendor'    : 'Riburitu',
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : 'Riburitu',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // Incluir JARs de libs en el JAR final
    from {
        fileTree(dir: 'librerias', include: '*.jar').collect { zipTree(it) }
    } {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}